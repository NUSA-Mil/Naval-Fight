import 'dart:io';
import 'dart:math';

const int gridSize = 10;

void main() {
  List<List<String>> playerGrid = List.generate(gridSize, (_) => List.generate(gridSize, (_) => '‚¨ú'));
  List<List<String>> computerGrid = List.generate(gridSize, (_) => List.generate(gridSize, (_) => '‚¨ú')); // –í–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
  List<List<String>> computerShips = List.generate(gridSize, (_) => List.generate(gridSize, (_) => '‚¨ú'));
  List<List<String>> computerAttacks = List.generate(gridSize, (_) => List.generate(gridSize, (_) => '‚¨ú')); // –ü–æ–ª–µ –¥–ª—è –∞—Ç–∞–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  bool isGameOver(List<List<String>> grid) {
    for (var row in grid) {
      for (var cell in row) {
        if (cell == 'üö¢') {
          return false; // –ï—Å—Ç—å –µ—â—ë –Ω–µ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–Ω—ã–µ –∫–æ—Ä–∞–±–ª–∏
        }
      }
    }
    return true; // –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  void printGrid(List<List<String>> grid) {
    for (var row in grid) {
      print(row.join(' '));
    }
    print('');
  }

  // –í–∏–¥–∏–º–æ–µ –ø–æ–ª–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
  void printVisibleComputerGrid() {
    print("–ü–æ–ª–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ (–¥–ª—è –∏–≥—Ä–æ–∫–∞):");
    for (var row in computerGrid) {
      print(row.join(' '));
    }
    print('');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
  bool canPlaceShip(int x, int y, int length, bool horizontal, List<List<String>> grid) {
    for (int i = 0; i < length; i++) {
      int dx = horizontal ? x : x + i;
      int dy = horizontal ? y + i : y;

      if (dx >= gridSize || dy >= gridSize || grid[dx][dy] != '‚¨ú') {
        return false;
      }

      for (int nx = dx - 1; nx <= dx + 1; nx++) {
        for (int ny = dy - 1; ny <= dy + 1; ny++) {
          if (nx >= 0 && nx < gridSize && ny >= 0 && ny < gridSize && grid[nx][ny] == 'üö¢') {
            return false;
          }
        }
      }
    }
    return true;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è
  void placeShip(int x, int y, int length, bool horizontal, List<List<String>> grid) {
    for (int i = 0; i < length; i++) {
      int dx = horizontal ? x : x + i;
      int dy = horizontal ? y + i : y;
      grid[dx][dy] = 'üö¢';
    }
  }

  // –†—É—á–Ω–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
  void manualPlacement(List<List<String>> grid) {
    var ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
    for (var ship in ships) {
      bool placed = false;
      while (!placed) {
        printGrid(grid);
        print('–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –∫–æ—Ä–∞–±–ª—å –¥–ª–∏–Ω–æ–π $ship.');
        stdout.write('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x y): ');
        var startInput = stdin.readLineSync();
        stdout.write('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x y): ');
        var endInput = stdin.readLineSync();

        if (startInput == null || endInput == null) {
          print('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n');
          continue;
        }

        try {
          var startCoords = startInput.split(' ').map(int.parse).toList();
          var endCoords = endInput.split(' ').map(int.parse).toList();

          int x1 = startCoords[0];
          int y1 = startCoords[1];
          int x2 = endCoords[0];
          int y2 = endCoords[1];

          bool horizontal = x1 == x2; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
          int length = horizontal ? (y2 - y1).abs() + 1 : (x2 - x1).abs() + 1;

          if (length == ship && canPlaceShip(x1, y1, ship, horizontal, grid)) {
            placeShip(x1, y1, ship, horizontal, grid);
            placed = true;
          } else {
            print('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ä–∞–±–ª—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.\n');
          }
        } catch (e) {
          print('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞–º–∏.\n');
        }
      }
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–∞–±–ª–µ–π
  void autoPlacement(List<List<String>> grid) {
    var ships = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];
    for (var ship in ships) {
      bool placed = false;
      while (!placed) {
        int x = Random().nextInt(gridSize);
        int y = Random().nextInt(gridSize);
        bool horizontal = Random().nextBool();
        if (canPlaceShip(x, y, ship, horizontal, grid)) {
          placeShip(x, y, ship, horizontal, grid);
          placed = true;
        }
      }
    }
  }

  // –ê—Ç–∞–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ –∏–≥—Ä–æ–∫—É
  void computerAttack(List<List<String>> playerGrid) {
    while (true) {
      int x = Random().nextInt(gridSize);
      int y = Random().nextInt(gridSize);

      if (playerGrid[x][y] == '‚¨ú') {
        print('–ö–æ–º–ø—å—é—Ç–µ—Ä —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ ($x, $y): –ú–∏–º–æ.');
        playerGrid[x][y] = '‚ùå';
        break;
      } else if (playerGrid[x][y] == 'üö¢') {
        print('–ö–æ–º–ø—å—é—Ç–µ—Ä —Å—Ç—Ä–µ–ª—è–µ—Ç –≤ ($x, $y): –ü–æ–ø–∞–¥–∞–Ω–∏–µ!');
        playerGrid[x][y] = 'üî•';
        break;
      }
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã
  void playGame() {
    while (true) {
      print('–í–∞—à–µ –ø–æ–ª–µ:');
      printGrid(playerGrid);

      printVisibleComputerGrid();

      stdout.write('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞—Ç–∞–∫–∏ (x y): ');
      var input = stdin.readLineSync();
      if (input == null || input.isEmpty) continue;

      var coords;
      try {
        coords = input.split(' ').map(int.parse).toList();
      } catch (e) {
        print('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º.\n');
        continue;
      }

      if (coords.length != 2) {
        print('–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º!\n');
        continue;
      }

      int x = coords[0];
      int y = coords[1];

      if (x < 0 || x >= gridSize || y < 0 || y >= gridSize) {
        print('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n');
        continue;
      }

      if (computerGrid[x][y] != '‚¨ú') {
        print('–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n');
        continue;
      }

      if (computerShips[x][y] == 'üö¢') {
        print('–í—ã –ø–æ–ø–∞–ª–∏!');
        computerGrid[x][y] = 'üî•';
        computerShips[x][y] = 'üî•';
      } else {
        print('–ú–∏–º–æ.');
        computerGrid[x][y] = '‚ùå';
      }

      if (isGameOver(computerShips)) {
        print('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–∞–±–ª–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.');
        break;
      }

      print('–¢–µ–ø–µ—Ä—å –∫–æ–º–ø—å—é—Ç–µ—Ä –∞—Ç–∞–∫—É–µ—Ç!');
      computerAttack(playerGrid);

      if (isGameOver(playerGrid)) {
        print('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–æ–º–ø—å—é—Ç–µ—Ä —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤—Å–µ –≤–∞—à–∏ –∫–æ—Ä–∞–±–ª–∏. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.');
        break;
      }
    }
    
  }

  print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π "–ú–æ—Ä—Å–∫–æ–π –±–æ–π"!');
  print('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ—Ä–∞–±–ª–µ–π:');
  print('1. –†—É—á–Ω–æ–π');
  print('2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π');
  stdout.write('–í–∞—à –≤—ã–±–æ—Ä: ');

  var choice = stdin.readLineSync();
  if (choice == '1') {
    manualPlacement(playerGrid);
  } else {
    autoPlacement(playerGrid);
  }

  autoPlacement(computerShips);
  playGame();
}
